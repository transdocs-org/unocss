import{_ as i,i as a,o as e,at as t}from"./chunks/framework.YwE0kBUe.js";const c=JSON.parse('{"title":"自动补全工具","description":"UnoCSS 的自动补全工具（@unocss/autocomplete）。","frontmatter":{"title":"自动补全工具","description":"UnoCSS 的自动补全工具（@unocss/autocomplete）。"},"headers":[],"relativePath":"tools/autocomplete.md","filePath":"tools/autocomplete.md","lastUpdated":1756707460000}'),l={name:"tools/autocomplete.md"};function n(h,s,o,d,r,k){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="自动补全" tabindex="-1">自动补全 <a class="header-anchor" href="#自动补全" aria-label="Permalink to &quot;自动补全&quot;">​</a></h1><p>UnoCSS 的自动补全工具：<code>@unocss/autocomplete</code>。该功能已集成在 <a href="/play" target="_blank" rel="noreferrer">在线体验平台</a> 和 <a href="/integrations/vscode">VS Code 插件</a> 中。</p><h2 id="使用方式" tabindex="-1">使用方式 <a class="header-anchor" href="#使用方式" aria-label="Permalink to &quot;使用方式&quot;">​</a></h2><h3 id="静态规则" tabindex="-1">静态规则 <a class="header-anchor" href="#静态规则" aria-label="Permalink to &quot;静态规则&quot;">​</a></h3><p>像下面这样的静态规则无需任何配置即可直接生效。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">rules</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  [</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">flex</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> { </span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">display</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">flex</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }]</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span></code></pre></div><h3 id="动态规则" tabindex="-1">动态规则 <a class="header-anchor" href="#动态规则" aria-label="Permalink to &quot;动态规则&quot;">​</a></h3><p>对于动态规则，你可以为规则提供一个额外的 <code>meta</code> 对象，并指定自动补全模板。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;" tabindex="0"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">rules</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  [</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">    /</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">^</span><span style="--shiki-light:#AB5E3F;--shiki-dark:#C4704F;">m-</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#5A6AA6;--shiki-dark:#6872AB;">\\d</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">$</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">/</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    ([,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> d</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">])</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ({ </span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">margin</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">\`</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">\${</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">d </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">/</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 4</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">}</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">rem</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">\`</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }),</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    { </span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">autocomplete</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">: </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">m-&lt;num&gt;</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> },</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // &lt;-- 这里</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  ],</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span></code></pre></div><p>模板使用一个简单的 DSL 来定义自动补全建议。语法如下：</p><ul><li><code>(...|...)</code>：使用 <code>|</code> 分隔的逻辑“或”组。当部分组匹配时，它们将作为建议显示。</li><li><code>&lt;...&gt;</code>：内置的简写。目前支持 <code>&lt;num&gt;</code>、<code>&lt;percent&gt;</code> 和 <code>&lt;directions&gt;</code>。</li><li><code>$...</code>：主题推导。例如 <code>$colors</code> 将列出主题中 <code>colors</code> 对象的所有属性。</li></ul><h2 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h2><h3 id="示例-1" tabindex="-1">示例 1 <a class="header-anchor" href="#示例-1" aria-label="Permalink to &quot;示例 1&quot;">​</a></h3><ul><li><strong>模板</strong>： <code>(border|b)-(solid|dashed|dotted|double|hidden|none)</code></li><li><strong>输入</strong>： <code>b-do</code></li><li><strong>建议</strong>： <code>b-dotted</code>, <code>b-double</code></li></ul><h3 id="示例-2" tabindex="-1">示例 2 <a class="header-anchor" href="#示例-2" aria-label="Permalink to &quot;示例 2&quot;">​</a></h3><ul><li><strong>模板</strong>： <code>m-&lt;num&gt;</code></li><li><strong>输入</strong>： <code>m-</code></li><li><strong>建议</strong>： <code>m-1</code>, <code>m-2</code>, <code>m-3</code>…</li></ul><h3 id="示例-3" tabindex="-1">示例 3 <a class="header-anchor" href="#示例-3" aria-label="Permalink to &quot;示例 3&quot;">​</a></h3><ul><li><strong>模板</strong>： <code>text-$colors</code></li><li><strong>输入</strong>： <code>text-r</code></li><li><strong>建议</strong>： <code>text-red</code>, <code>text-rose</code>…</li></ul><h3 id="示例-4" tabindex="-1">示例 4 <a class="header-anchor" href="#示例-4" aria-label="Permalink to &quot;示例 4&quot;">​</a></h3><p>对于多个模板的情况：</p><ul><li><strong>模板</strong>： <code>[&#39;(border|b)-&lt;num&gt;&#39;, &#39;(border|b)-&lt;directions&gt;-&lt;num&gt;&#39;]</code></li><li><strong>输入</strong>： <code>b-</code></li><li><strong>建议</strong>： <code>b-x</code>, <code>b-y</code>, <code>b-1</code>, <code>b-2</code>…</li><li><strong>输入</strong>： <code>b-x-</code></li><li><strong>建议</strong>： <code>b-x-1</code>, <code>b-x-2</code>…</li></ul><h2 id="许可证" tabindex="-1">许可证 <a class="header-anchor" href="#许可证" aria-label="Permalink to &quot;许可证&quot;">​</a></h2><ul><li>MIT License © 2021-PRESENT <a href="https://github.com/antfu" target="_blank" rel="noreferrer">Anthony Fu</a></li></ul>`,23)]))}const g=i(l,[["render",n]]);export{c as __pageData,g as default};
